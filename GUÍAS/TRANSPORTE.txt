1. ¿Cómo se puede distinguir a qué aplicación debe entregar UDP el datagrama que
acaba de llegar?

Por el puerto de destino y de llegada que elige el sistema operativo para esa aplicación.
Si no hay ninguna aplicación asignada a ese puerto, se descartan los datagramas.

2. ¿Cómo se calcula el checksum de UDP?

Se calcula con la suma complemento a 1 de palabras de 16 bits. Cuando termina la suma hace el complemento
a 1 y tiene que dar todo 1.
Con el bit de carry se lo sumo al resultado. A ese resultado le hago el complemento a 1

Ejemplo: 10 + 11 = 01 y Carry = 10 -> hago complemento a 1 -> 01

Hay error si el checksum calculado en el receptor no coincide 
con el checksum publicado en la cabecera.

3. Suponga que la ventana de congestión de TCP está en 18 Kbytes. La ventana
publicada por el otro extremo de la sesión es de 64 Kbyte. ¿A qué valor llegará dicha
ventana si los siguientes 5 segmentos transmitidos resultan exitosos y no se recibió
aún ningún ACK? Suponga un tamaño máximo de segmento de 2 Kbytes.

-Se envían 5 segmentos de 2 KB -> Se están mandando 10 KB

El algoritmo de control de congestion tiene 3 fases:
-Slow start
-Congestion Avoidance
-Fast recovery

Siempre empieza con slow start: 
	Se envia un paquete, si llega bien se manda un ACK
	Se duplica el cwnd y ahora se mandan el doble de paquetes
	Asi sucesivamente
	Si llega mal un paquete, se divide por la mitad el mss y ahora si hay un umbral, la mitad del valor que tenia 
	la ventana de congestion cuando había perdida de paquetes
	Se sigue el mismo comportamiento hasta el umbral.
	Se pasa a la parte de congestion avoidance.
Congestion Avoidance: Ahora es lineal el envió de paquetes. Aumenta la cwnd en un MSS por cada paquete enviado.
	Si se reciben 3 veces un ACK hay un error, cwnd = cwmd / 2, y se le agregan 3 MSS en tamaño y se entra en fase
	FAST RECOVERY.
	Si hay perdida de paquetes, hay un suceso de fin de temporización, el umbral va a la mitad y cwnd vale 1.
Fast recovery:
	Se aumenta en un MSS por cada ACK duplicado del recibido.
	Estamos en esta fase por el segmento que no llego, cada vez que se manda el ACK duplicado se aumenta en 1.
	Cuando llega el segmento bien, entra TCP en Congestion Avoidance.
	Si se produce un fin de temporización, se va a SLOW START con la mitad del valor del umbral cuando se produjo.
	a
	
Empieza en el MSS 1 y se va a 2 cuando llega un ACK, Entonces queda la ventana en 18 Kbytes.

Si se recibe un ACK después de los 5 enviados, 2KB * 5 enviados = 10 KB 

Entonces la ventana ahora vale 28 KB. (El buffer quedaría en 54 KB, SE LE RESTA LO QUE LE LLEGÓ).

ROUND TRIP TIME (RTT): EL TIEMPO QUE TARDA EN IR Y VOLVER UN MENSAJE TCP.

MAXIMUM SEGMENT SIZE: SOLO SON LOS DATOS DE LA CAPA DE APLICACION

SI SE LE AGREGA LA CABECERA DE TCP Y DE IP SE LLAMA MTU (MAXIMUM TRANSMITION UNIT)
	

4. Determine el tamaño óptimo de ventana para una sesión TCP en la que el RTT =
100 mseg, MSS = 600 bytes y velocidad de la interfaz 128 Kbps.

Estamos limitados a 128 KB en un segundo
En 100mseg = 0.1s serian 12.8 KB en un segundo

RTT * V_INTERFAZ = 100mseg * 128 kbps = 12.8k 

A MSS NO SE LE AGREGAN LOS 40 DEL ENCABEZADO, ESE ES EL MTU.
 
5. Dos Hosts A y B se comunican a través de una sesión TCP. El host B recibió de A
todos los bytes hasta el 144.
Suponga que el Host A luego envía dos segmentos a B, de 20 y 40 bytes
respectivamente. En el primer segmento el número de secuencia es 145, port origen
303 y port destino 80.
El Host B envía un ACK siempre que recibe un segmento de A. Responda para cada
situación:

a) ¿Cuál será el número de secuencia, el número de ack, y ports origen y
destino en el segmento enviado por B al recibir el segmento de 40 bytes?

A manda 144 bytes
B devuelve ack 144
A manda secuencia 145 de 20 bytes
B devuelve ack 165 
A manda secuencia 165 de 40 bytes
B manda ack 205

SEC = 165
ACK = 40 + 165 = 205 
SRC = 80
DEST = 303


b) Si el segmento de 40 bytes llega antes que el de 20 bytes, indique campos
relevantes del segmento que B enviará.

A manda sec 144
A manda sec 145 de 20 bytes
A manda sec 165 de 40 bytes
B manda ack 144 + 1 = 145 (Primer ACK)



c) Suponga que los dos segmentos enviados por A llegan a B en orden. El
primer ACK se pierde y el segundo segmento llega después que el timeout
del primer segmento expire. Indique los segmentos a intercambiar por parte
de A y B a continuación.

A nunca recibe el ACK del de 20 bits, y no recibe el ACK del segundo tampoco
A no sabe que llegó y espera el timeout, Asi que retransmite el primer segmento.
Lo retransmite con el mismo numero de secuencia (145)
B los había recibido asi que esta esperando el 205
B le responde a A con el ACK 205 porque ya los tiene, le dice que le mande los siguientes
porque ya los posee.


6. En la secuencia de envío de segmentos TCP reflejada en la figura, en la que las
líneas horizontales representan tics de reloj, se sabe que:
a. A desea enviar a B 200 bytes de datos.

b. B desea enviar a A 100 bytes de datos.

c. A y B usan un tamaño fijo de datos de 50 bytes.

d. A y B ajustan la ventana acorde con “congestion avoidance”.

e. Tanto A como B sólo transmiten segmentos coincidiendo con el tic de reloj.

f. Todos los segmentos tardan en llegar al destino medio tic de reloj, sino se
pierden.

g. A y B tienen un plazo para retransmitir segmentos de 5 tics de reloj.

h. A y B enviarán segmentos con datos siempre que puedan.

i. A y B enviarán un asentimiento cada vez que reciban un segmento con
datos.

j. Teniendo en cuenta que la zona sombreada indica un periodo de tiempo
durante el cual todos los segmentos transmitidos se perderán y que fuera de
dicho periodo no se perderá ningún segmento, complete la transmisión en la
figura (incluyendo el cierre de conexión).

7. Complete la secuencia de envío de segmentos TCP reflejada en la figura, incluyendo
el cierre de la conexión, en la que las líneas horizontales representan tics de reloj,
sabiendo que:
○ No se perderá ningún segmento en la transmisión excepto el cuarto con
datos enviados por A.
○ Los segmentos no dibujados (excepto el anteriormente citado) tardarán en
llegar al destino medio tic de reloj, y no se perderán.
○ A está utilizando arranque lento (Slow Start) para prevenir la congestión.
○ A tiene que enviar a B 800 bytes de datos, una vez enviados procederá a
cerrar la conexión.
○ B no desea enviar datos a A.
○ B enviará asentimientos a A cuando haya recibido dos segmentos de A
desde el último segmento asentido o cuando hayan sucedido 2 tics de reloj
desde el último segmento recibido.
○ El plazo de retransmisión de segmentos en A (timeout) es de 3 tics de reloj.
○ A usa un tamaño fijo de datos de 200 bytes.
○ B siempre enviará un valor de 800 en el campo de tamaño de la ventana de
recepción.
○ Tanto A como B sólo transmiten segmentos coincidiendo con el tic de reloj.
○ A enviará segmentos con datos siempre que pueda.

8. Se realizó la captura de las siguientes tramas Ethernet: (tenga en cuenta que se
extrajeron los bytes de preámbulo)
Trama 1:
00 18 f8 4e 70 2f 00 50 2c a4 34 ec 08 00 45 00
00 3e 7f 5e 00 00 80 11 cf aa c0 a8 01 64 c8 2a
61 6f 04 06 00 35 00 2a 2c a8 e4 e8 01 00 00 01
00 00 00 00 00 00 03 77 77 77 08 6d 69 6e 69 6e
6f 76 61 03 6f 72 67 00 00 01 00 01 23 cd ac f2
Trama 2:
00 50 2c a4 34 ec 00 18 f8 4e 70 2f 08 00 45 00
00 5c b7 fa 00 00 3c 11 da f0 c8 2a 61 6f c0 a8
01 64 00 35 04 06 00 48 36 15 e4 e8 81 80 00 01
00 02 00 00 00 00 03 77 77 77 08 6d 69 6e 69 6e
6f 76 61 03 6f 72 67 00 00 01 00 01 c0 0c 00 05
00 01 00 00 25 11 00 02 c0 10 c0 10 00 01 00 01
00 00 25 11 00 04 57 e9 93 8c a1 23 64 f3
Trama 3:
00 18 f8 4e 70 2f 00 50 2c a4 34 ec 08 00 45 00
00 30 7f 61 40 00 80 06 cd e4 c0 a8 01 64 57 e9
93 8c 0c 54 00 50 f0 e8 a3 97 00 00 00 00 70 02
ff ff 34 79 00 00 02 04 05 b4 01 01 04 02 11 ac
fb 4b
Trama 4:
00 50 2c a4 34 ec 00 18 f8 4e 70 2f 08 00 45 00
00 30 00 00 40 00 35 06 98 46 57 e9 93 8c c0 a8
01 64 00 50 0c 54 16 3b ae 0d f0 e8 a3 98 70 12
16 d0 59 4f 00 00 02 04 05 b4 01 01 04 02 ac 23
23 ca
Trama 5:
00 18 f8 4e 70 2f 00 50 2c a4 34 ec 08 00 45 00
00 28 7f 62 40 00 80 06 cd eb c0 a8 01 64 57 e9
93 8c 0c 54 00 50 f0 e8 a3 98 16 3b ae 0e 50 10
ff ff 9c e3 00 00 a2 cb 23 45
Trama 6:
00 18 f8 4e 70 2f 00 50 2c a4 34 ec 08 00 45 00
01 c0 7f 63 40 00 80 06 cc 52 c0 a8 01 64 57 e9
93 8c 0c 54 00 50 f0 e8 a3 98 16 3b ae 0e 50 18
ff ff ee 95 00 00 47 45 54 20 2f 20 48 54 54 50
2f 31 2e 31 0d 0a 48 6f 73 74 3a 20 77 77 77 2e
6d 69 6e 69 6e 6f 76 61 2e 6f 72 67 0d 0a 55 73
65 72 2d 41 67 65 6e 74 3a 20 4d 6f 7a 69 6c 6c
61 2f 35 2e 30 20 28 57 69 6e 64 6f 77 73 3b 20
55 3b 20 57 69 6e 64 6f 77 73 20 4e 54 20 35 2e

Se pide: Analizar los campos relevantes de la información de nivel de transporte que
contienen.

9. ¿Qué son Slow Start y Congestion Avoidance? ¿Cómo intervienen sobre el tráfico?